{"version":3,"sources":["history/index.js","components/PurchaseOrderTable.js","services/Api.js","pages/main/Main.js","components/EditDialog.js","components/FinishVerificationDialog.js","components/ProductCountTable.js","pages/product-count/ProductCount.js","routes.js","context/index.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","useStyles","makeStyles","table","minWidth","SimpleTable","props","classes","React","useState","purchaseOrders","loading","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","style","width","height","display","justifyContent","alignItems","CircularProgress","SimpleTableBody","TableBody","map","row","key","purchaseOrderId","onClick","purchaseOrder","history","push","scope","Number","purchaseOrderNumber","clientName","api","axios","create","baseURL","process","REACT_APP_API_URL","Main","page","state","setState","useEffect","loadPurchaseOrders","a","async","get","response","data","EditDialog","initialState","open","textValue","textPass","handleClose","IconButton","Dialog","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","TextField","label","type","value","onChange","target","InputLabelProps","shrink","variant","error","autoComplete","helperText","DialogActions","Button","color","disabled","FinishVerificationDialog","amountBoxes","grossWeight","size","startIcon","InputProps","startAdornment","InputAdornment","position","totalQuantity","totalVerifield","products","forEach","product","quantity","totalVerified","productsVerification","body","quantityBoxes","patch","goBack","ProductCountTable","inputValue","codeEan","openAlertDialog","handleEditClick","code","verificationProduct","rowColor","handleCloseAlertDialog","button","handleSaveClick","aria-describedby","backgroundColor","description","event","length","flag","handleChangeInput","autoFocus","ProductCountPage","useParams","loadPurchaseOrder","Routes","exact","path","MainPage","initialStore","App","createContext","store","actions","setPurchaseOrders","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b90edb8.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport React from 'react';\nimport ReactLoading from \"react-loading\";\nimport history from '../history';\n\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nexport default function SimpleTable(props) {\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n\n  const purchaseOrders = props.purchaseOrders\n  const loading = props.loading\n\n\n  const handleChangePage = (event, newPage) => {\n      setPage(newPage);\n    };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Código</TableCell>\n            <TableCell align=\"center\">Cliente</TableCell>\n          </TableRow>\n        </TableHead>\n        {loading ? <div style={{width: \"100%\",height: \"100\",display: \"flex\",justifyContent: \"center\",alignItems: \"center\"}}><CircularProgress /></div> : <SimpleTableBody purchaseOrders={purchaseOrders} />}\n    \n        {/* <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n              colSpan={3}\n              count={purchaseOrders.length}\n              rowsPerPage={5}//rowsPerPage}\n              page={page}\n              SelectProps={{\n                inputProps: { 'aria-label': 'rows per page' },\n                native: true,\n              }}\n               onChangePage={handleChangePage}\n            //   onChangeRowsPerPage={handleChangeRowsPerPage}\n            //   ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter> */}\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction SimpleTableBody(props) {\n\n  const purchaseOrders = props.purchaseOrders\n\n  function handleClick(purchaseOrder){\n    history.push('/product-count/'+purchaseOrder.purchaseOrderId);\n  };\n\n  return (\n    <TableBody>\n        {purchaseOrders.map(row => (\n          <TableRow key={row.purchaseOrderId} onClick={() => handleClick(row)}>\n            <TableCell component=\"th\" scope=\"row\">\n              {Number(row.purchaseOrderNumber)}\n            </TableCell>\n            <TableCell align=\"center\">{row.clientName}</TableCell>\n          </TableRow>\n        ))}\n    </TableBody>\n  )\n}\n","import axios from 'axios'\n\nconst api = axios.create({ baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api'})\n\nexport default api;\n","import React, { useEffect, useState }  from 'react';\nimport PurchaseOrderTable from '../../components/PurchaseOrderTable'\nimport api from '../../services/Api'\n\nconst Main = () => {\n\n    const [state, setState] = useState({\n        purchaseOrders: [],\n        page: 1,\n        loading: true\n    });\n\n    useEffect(()=> {\n        loadPurchaseOrders();        \n    }, [])\n\n    const loadPurchaseOrders = async () => {\n        const response = await api.get('/purchase-orders?page=1&size=100');\n        setState({\n            purchaseOrders: response.data.purchaseOrders,\n            page: response.data.page,\n            loading: false\n        })\n    };\n  \n    return (\n      <PurchaseOrderTable purchaseOrders={state.purchaseOrders} page={state.page} loading={state.loading} />\n    );\n}\n\n    export default Main\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\n\nexport default function EditDialog(props) {\n\n const initialState = {\n    open: false, \n    textValue: 0,\n    textPass: ''\n}\n\n  const [state, setState] = React.useState(initialState);\n  \n  const handleClick = (value) => props.onClick ? props.onClick(value) : null\n\n  const handleClickOpen = () => {\n    setState({...state, open:true});\n  };\n\n  const handleClose = () => {\n    setState(initialState);\n  };\n\n  const handleFinish = () => {\n    handleClick(state.textValue)\n    setState(initialState);\n  };\n\n  const handleTextFieldOnChange = ({target}) => {\n    setState({...state, textValue: target.value});\n  };\n\n\n  const handlePasswordFieldOnChange = ({target}) => {\n    setState({...state, textPass: target.value});\n  };\n\n  return (\n    <div>\n      <IconButton onClick={() => handleClickOpen()} aria-label=\"delete\">\n         <EditIcon />\n      </IconButton>\n      <Dialog open={state.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Editar</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Quantidade produtos:\n          </DialogContentText>\n          <div>\n          <TextField\n            id=\"outlined-number\"\n            label=\"Número\"\n            type=\"number\"\n            value={state.textValue}\n            onChange={handleTextFieldOnChange}\n            InputLabelProps={{\n             shrink: true,\n            }}\n            variant=\"outlined\"\n          />\n          <TextField\n            value={state.textPass}\n            error={!state.textPass || state.textPass !== 'Teste' ? true : false}\n            onChange={handlePasswordFieldOnChange}\n            id=\"outlined-error-helper-text\"\n            label=\"Password\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            helperText=\"Incorrect entry.\"\n            variant=\"outlined\"\n          />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancelar\n          </Button>\n          <Button disabled={!state.textPass || state.textPass !== '0104' ? true : false} onClick={handleFinish} color=\"primary\">\n            Finalizar\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport DoneIcon from '@material-ui/icons/Done';\n\nimport api from '../services/Api'\nimport history from '../history';\n\nexport default function FinishVerificationDialog(props) {\n\n const initialState = {\n    open: false, \n    amountBoxes: 0,\n    grossWeight: 0.0\n}\n\n  const [state, setState] = React.useState(initialState);\n  \n  const handleClickOpen = () => {\n    setState({...state, open:true});\n  };\n\n  const handleClose = () => {\n    setState(initialState);\n  };\n\n  const productsVerification = () => {\n    let totalQuantity = 0\n    let totalVerifield = 0\n\n    props.products.forEach(product => {\n      totalQuantity+=Number(product.quantity)\n      totalVerifield+=Number(product.totalVerified)\n    });\n\n    return totalQuantity === totalVerifield\n  };\n\n  const handleFinish = async() => {\n    let body = {\n      quantityBoxes: state.amountBoxes,\n      grossWeight: state.grossWeight\n    }\n    await api.patch('/purchase-orders/'+props.purchaseOrderId+'/freight', body)\n    \n    body = {\n      products: props.products\n    }\n\n    await api.patch('/purchase-orders/'+props.purchaseOrderId+'/products', body)\n    \n    history.goBack()\n  };\n\n  const handleTextFieldAmountBoxesOnChange = ({target}) => {\n    setState({...state, amountBoxes: target.value});\n  };\n\n  const handleTextFieldGrossWeightOnChange = ({target}) => {\n    setState({...state, grossWeight: target.value});\n  };\n\n\n\n  return (\n    <div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"large\"\n        startIcon={<DoneIcon />}\n        onClick={() => handleClickOpen()}\n      >\n        Finalizar\n      </Button>\n      <Dialog open={state.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Finalizar verificação do pedido</DialogTitle>\n        <DialogContent>\n          <div>\n          <TextField\n            id=\"outlined-number\"\n            label=\"Quantidade de caixas\"\n            type=\"number\"\n            value={state.amountBoxes}\n            onChange={handleTextFieldAmountBoxesOnChange}\n            InputLabelProps={{\n             shrink: true,\n            }}\n            variant=\"outlined\"\n          />\n          <TextField\n          label=\"Peso bruto\"\n          id=\"outlined-start-adornment\"\n          value={state.grossWeight}\n          onChange={handleTextFieldGrossWeightOnChange}\n          type=\"number\" \n          InputProps={{\n            startAdornment: <InputAdornment position=\"end\">Kg </InputAdornment>,\n          }}\n          variant=\"outlined\"\n        />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancelar\n          </Button>\n          <Button disabled={(state.amountBoxes !== 0 && state.grossWeight !== 0 && productsVerification()) ? false : true} onClick={handleFinish} color=\"primary\">\n            Finalizar\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, { useEffect, useState }  from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport EditDialog from './EditDialog'\nimport FinishVerificationDialog from './FinishVerificationDialog'\nimport api from '../services/Api'\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nexport default function ProductCountTable(props) {\n  const classes = useStyles();\n  const {purchaseOrder} = props;\n  var sub = null;\n\n\n  const [state, setState] = useState({\n    products: [],\n    inputValue: \"\",\n    codeEan: \"\",\n    openAlertDialog: false\n  });\n\n  useEffect(()=> {\n    loadProducts();\n  }, [])\n\n  async function loadProducts(){\n    await setState({...state, products: purchaseOrder && purchaseOrder.products})\n  }\n\n  function handleEditClick(product, quantity){\n    verificationProduct(product.code, quantity)\n    setState({...state, inputValue:\"\"})\n  };\n\n\n  function handleSaveClick(purchaseOrderId, products){\n    const body = {\n      products: products\n    }\n\n    api.patch('/purchase-orders/'+purchaseOrderId+'/products', body)\n  };\n\n\n  function handleChangeInput(key){\n    setState({...state, codeEan: state.codeEan+key})\n    if(state.codeEan.length === 12){\n      let flag = false\n      state.products.forEach(product => {\n        if(product.code === state.codeEan+key){\n          product.totalVerified+=1\n          flag = true\n        }\n      })\n      if(flag === false){\n        setState({...state, openAlertDialog: true, codeEan: \"\"})\n      }\n      else setState({...state, codeEan: \"\"})\n    }\n  };\n\n  function verificationProduct(code, quantity){\n    state.products.forEach(product => {\n      if(product.code === code){\n        product.totalVerified = Number(quantity)\n      }\n    })\n  }\n\n  function rowColor(row){\n    if(row.quantity < row.totalVerified)return \"red\"\n    else if(row.quantity == row.totalVerified)return \"green\"\n    else if(row.totalVerified > 0) return \"yellow\"\n    else return \"default\"\n  }\n\n  function handleCloseAlertDialog(){\n    setState({...state, openAlertDialog: false})\n  }\n\n  return (\n    <div>\n      <h1>Número do pedido: {purchaseOrder.purchaseOrderNumber}</h1>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"large\"\n        className={classes.button}\n        startIcon={<SaveIcon />}\n        onClick={() => handleSaveClick(purchaseOrder.purchaseOrderId, state.products)}\n      >\n        Salvar\n      </Button>\n      <Dialog\n        open={state.openAlertDialog}\n        onClose={handleCloseAlertDialog}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">ALERTA!</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n          Você leu um código de um produto que não esta no pedido. Certifique-se se o pedido esta correto!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseAlertDialog} color=\"primary\">\n            Continuar\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <FinishVerificationDialog purchaseOrderId={purchaseOrder.purchaseOrderId} products={state.products}/>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\" size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Código de Barras</TableCell>\n              <TableCell align=\"right\">Produto</TableCell>\n              <TableCell align=\"right\">Quantidade</TableCell>\n              <TableCell align=\"right\">Ações</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {state.products.map(row => (\n              <TableRow key={row.code} style={{backgroundColor:rowColor(row)}} >\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.code}\n                </TableCell>\n                <TableCell align=\"right\">{row.description}</TableCell>\n                <TableCell align=\"right\">{row.quantity+\"/\"+row.totalVerified}</TableCell>\n                <TableCell align=\"center\">\n                <EditDialog onClick={(value) => handleEditClick(row, value)}/>\n              </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    <input type=\"text\" value={state.inputValue} onChange={event => handleChangeInput(event.target.value)} autoFocus />\n   </div>\n  );\n}\n","import React, {useEffect, useState }  from 'react';\nimport ProductCountTable from '../../components/ProductCountTable'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useParams } from 'react-router-dom';\nimport api from '../../services/Api'\n\n\nconst ProductCountPage = () => {\n  \n      const { purchaseOrderId } = useParams();\n      const [ state, setState ] = useState({\n        purchaseOrder: null\n      });\n\n      \n      useEffect(()=> {\n        loadPurchaseOrder();        \n    }, [])\n\n    const loadPurchaseOrder = async () => {\n        const response = await api.get('/purchase-orders/'+purchaseOrderId);\n        setState({\n            purchaseOrder: response.data,\n        })\n    };\n      \n    if(!purchaseOrderId) return null;\n\n    if(state.purchaseOrder === null){\n      return (\n        <CircularProgress />\n      )\n    }\n    return (\n      <ProductCountTable purchaseOrder={state.purchaseOrder}/>\n    );\n  \n}\n\nexport default ProductCountPage","import React from 'react';\nimport {Router, Switch, Route} from 'react-router-dom';\nimport MainPage from './pages/main/Main';\nimport ProductCountPage from './pages/product-count/ProductCount'\nimport history from './history';\n\nconst Routes = () => (\n    <Router history={history}>\n        <Switch>\n            <Route exact path=\"/\" component={MainPage} />\n            <Route exact path=\"/product-count/:purchaseOrderId\" component={ProductCountPage} />\n        </Switch>\n    </Router>\n);\n\nexport default Routes","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\n\nconst initialStore = {\n    purchaseOrders: []\n};\n\nexport const StoreContext = React.createContext({\n  store: initialStore,\n  actions: {\n    setPurchaseOrders: () => {},\n  },\n});\n\nconst setPurchaseOrders = (store, setStore, purchaseOrders) => {\n  setStore({ ...store, purchaseOrders });\n};\n\nexport const Context = ({ children }) => {\n  const [store, _setStore] = useState(initialStore);\n\n  const setStore = _store => {\n    const newStore = { ...store, ..._store };\n    _setStore(newStore);\n  };\n\n  const actions = {\n    setPurchaseOrders: setPurchaseOrders.bind(null, store, setStore),\n  };\n\n  return (\n    <StoreContext.Provider value={{ store, actions }}>\n      {children}\n    </StoreContext.Provider>\n  );\n};\n\nContext.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};","import React from 'react';\nimport Routes from './routes'\nimport { Context } from './context'\n\n\n\nexport const App = () => {\n\n    return (\n      <Routes />      \n  ); \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n        <App />\n    , document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}